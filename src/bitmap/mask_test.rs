/*

*/

use crate::bitmap::mask::Masks;

#[test]
fn test_mask_and_upto() -> anyhow::Result<()> {
    let cases = vec![
        "0000000000000000000000000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000001",
        "0000000000000000000000000000000000000000000000000000000000000011",
        "0000000000000000000000000000000000000000000000000000000000000111",
        "0000000000000000000000000000000000000000000000000000000000001111",
        "0000000000000000000000000000000000000000000000000000000000011111",
        "0000000000000000000000000000000000000000000000000000000000111111",
        "0000000000000000000000000000000000000000000000000000000001111111",
        "0000000000000000000000000000000000000000000000000000000011111111",
        "0000000000000000000000000000000000000000000000000000000111111111",
        "0000000000000000000000000000000000000000000000000000001111111111",
        "0000000000000000000000000000000000000000000000000000011111111111",
        "0000000000000000000000000000000000000000000000000000111111111111",
        "0000000000000000000000000000000000000000000000000001111111111111",
        "0000000000000000000000000000000000000000000000000011111111111111",
        "0000000000000000000000000000000000000000000000000111111111111111",
        "0000000000000000000000000000000000000000000000001111111111111111",
        "0000000000000000000000000000000000000000000000011111111111111111",
        "0000000000000000000000000000000000000000000000111111111111111111",
        "0000000000000000000000000000000000000000000001111111111111111111",
        "0000000000000000000000000000000000000000000011111111111111111111",
        "0000000000000000000000000000000000000000000111111111111111111111",
        "0000000000000000000000000000000000000000001111111111111111111111",
        "0000000000000000000000000000000000000000011111111111111111111111",
        "0000000000000000000000000000000000000000111111111111111111111111",
        "0000000000000000000000000000000000000001111111111111111111111111",
        "0000000000000000000000000000000000000011111111111111111111111111",
        "0000000000000000000000000000000000000111111111111111111111111111",
        "0000000000000000000000000000000000001111111111111111111111111111",
        "0000000000000000000000000000000000011111111111111111111111111111",
        "0000000000000000000000000000000000111111111111111111111111111111",
        "0000000000000000000000000000000001111111111111111111111111111111",
        "0000000000000000000000000000000011111111111111111111111111111111",
        "0000000000000000000000000000000111111111111111111111111111111111",
        "0000000000000000000000000000001111111111111111111111111111111111",
        "0000000000000000000000000000011111111111111111111111111111111111",
        "0000000000000000000000000000111111111111111111111111111111111111",
        "0000000000000000000000000001111111111111111111111111111111111111",
        "0000000000000000000000000011111111111111111111111111111111111111",
        "0000000000000000000000000111111111111111111111111111111111111111",
        "0000000000000000000000001111111111111111111111111111111111111111",
        "0000000000000000000000011111111111111111111111111111111111111111",
        "0000000000000000000000111111111111111111111111111111111111111111",
        "0000000000000000000001111111111111111111111111111111111111111111",
        "0000000000000000000011111111111111111111111111111111111111111111",
        "0000000000000000000111111111111111111111111111111111111111111111",
        "0000000000000000001111111111111111111111111111111111111111111111",
        "0000000000000000011111111111111111111111111111111111111111111111",
        "0000000000000000111111111111111111111111111111111111111111111111",
        "0000000000000001111111111111111111111111111111111111111111111111",
        "0000000000000011111111111111111111111111111111111111111111111111",
        "0000000000000111111111111111111111111111111111111111111111111111",
        "0000000000001111111111111111111111111111111111111111111111111111",
        "0000000000011111111111111111111111111111111111111111111111111111",
        "0000000000111111111111111111111111111111111111111111111111111111",
        "0000000001111111111111111111111111111111111111111111111111111111",
        "0000000011111111111111111111111111111111111111111111111111111111",
        "0000000111111111111111111111111111111111111111111111111111111111",
        "0000001111111111111111111111111111111111111111111111111111111111",
        "0000011111111111111111111111111111111111111111111111111111111111",
        "0000111111111111111111111111111111111111111111111111111111111111",
        "0001111111111111111111111111111111111111111111111111111111111111",
        "0011111111111111111111111111111111111111111111111111111111111111",
        "0111111111111111111111111111111111111111111111111111111111111111",
        "1111111111111111111111111111111111111111111111111111111111111111",
    ];

    let m = Masks::new();

    for (i, c) in cases.iter().enumerate() {
        let got = format!("{:064b}", m.mask[i]);
        assert_eq!(*c, got, "mask[{}]", i);

        if i > 0 {
            let got = format!("{:064b}", m.mask_upto[i - 1]);
            assert_eq!(*c, got, "mask_upto[{}]", i - 1);
        }
    }

    Ok(())
}

#[test]
fn test_r_mask_and_upto() -> anyhow::Result<()> {
    //
    let cases = vec![
        "1111111111111111111111111111111111111111111111111111111111111111",
        "1111111111111111111111111111111111111111111111111111111111111110",
        "1111111111111111111111111111111111111111111111111111111111111100",
        "1111111111111111111111111111111111111111111111111111111111111000",
        "1111111111111111111111111111111111111111111111111111111111110000",
        "1111111111111111111111111111111111111111111111111111111111100000",
        "1111111111111111111111111111111111111111111111111111111111000000",
        "1111111111111111111111111111111111111111111111111111111110000000",
        "1111111111111111111111111111111111111111111111111111111100000000",
        "1111111111111111111111111111111111111111111111111111111000000000",
        "1111111111111111111111111111111111111111111111111111110000000000",
        "1111111111111111111111111111111111111111111111111111100000000000",
        "1111111111111111111111111111111111111111111111111111000000000000",
        "1111111111111111111111111111111111111111111111111110000000000000",
        "1111111111111111111111111111111111111111111111111100000000000000",
        "1111111111111111111111111111111111111111111111111000000000000000",
        "1111111111111111111111111111111111111111111111110000000000000000",
        "1111111111111111111111111111111111111111111111100000000000000000",
        "1111111111111111111111111111111111111111111111000000000000000000",
        "1111111111111111111111111111111111111111111110000000000000000000",
        "1111111111111111111111111111111111111111111100000000000000000000",
        "1111111111111111111111111111111111111111111000000000000000000000",
        "1111111111111111111111111111111111111111110000000000000000000000",
        "1111111111111111111111111111111111111111100000000000000000000000",
        "1111111111111111111111111111111111111111000000000000000000000000",
        "1111111111111111111111111111111111111110000000000000000000000000",
        "1111111111111111111111111111111111111100000000000000000000000000",
        "1111111111111111111111111111111111111000000000000000000000000000",
        "1111111111111111111111111111111111110000000000000000000000000000",
        "1111111111111111111111111111111111100000000000000000000000000000",
        "1111111111111111111111111111111111000000000000000000000000000000",
        "1111111111111111111111111111111110000000000000000000000000000000",
        "1111111111111111111111111111111100000000000000000000000000000000",
        "1111111111111111111111111111111000000000000000000000000000000000",
        "1111111111111111111111111111110000000000000000000000000000000000",
        "1111111111111111111111111111100000000000000000000000000000000000",
        "1111111111111111111111111111000000000000000000000000000000000000",
        "1111111111111111111111111110000000000000000000000000000000000000",
        "1111111111111111111111111100000000000000000000000000000000000000",
        "1111111111111111111111111000000000000000000000000000000000000000",
        "1111111111111111111111110000000000000000000000000000000000000000",
        "1111111111111111111111100000000000000000000000000000000000000000",
        "1111111111111111111111000000000000000000000000000000000000000000",
        "1111111111111111111110000000000000000000000000000000000000000000",
        "1111111111111111111100000000000000000000000000000000000000000000",
        "1111111111111111111000000000000000000000000000000000000000000000",
        "1111111111111111110000000000000000000000000000000000000000000000",
        "1111111111111111100000000000000000000000000000000000000000000000",
        "1111111111111111000000000000000000000000000000000000000000000000",
        "1111111111111110000000000000000000000000000000000000000000000000",
        "1111111111111100000000000000000000000000000000000000000000000000",
        "1111111111111000000000000000000000000000000000000000000000000000",
        "1111111111110000000000000000000000000000000000000000000000000000",
        "1111111111100000000000000000000000000000000000000000000000000000",
        "1111111111000000000000000000000000000000000000000000000000000000",
        "1111111110000000000000000000000000000000000000000000000000000000",
        "1111111100000000000000000000000000000000000000000000000000000000",
        "1111111000000000000000000000000000000000000000000000000000000000",
        "1111110000000000000000000000000000000000000000000000000000000000",
        "1111100000000000000000000000000000000000000000000000000000000000",
        "1111000000000000000000000000000000000000000000000000000000000000",
        "1110000000000000000000000000000000000000000000000000000000000000",
        "1100000000000000000000000000000000000000000000000000000000000000",
        "1000000000000000000000000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000",
    ];

    let m = Masks::new();

    for (i, c) in cases.iter().enumerate() {
        let got = format!("{:064b}", m.r_mask[i]);
        assert_eq!(*c, got, "r_mask[{}]", i);

        // r_mask_upto[i-1] == r_mask[i]
        if i > 0 {
            let got = format!("{:064b}", m.r_mask_upto[i - 1]);
            assert_eq!(*c, got, "r_mask_upto[{}]", i - i);
        }
    }

    Ok(())
}

#[test]
fn test_bit() -> anyhow::Result<()> {
    let cases = vec![
        "0000000000000000000000000000000000000000000000000000000000000001",
        "0000000000000000000000000000000000000000000000000000000000000010",
        "0000000000000000000000000000000000000000000000000000000000000100",
        "0000000000000000000000000000000000000000000000000000000000001000",
        "0000000000000000000000000000000000000000000000000000000000010000",
        "0000000000000000000000000000000000000000000000000000000000100000",
        "0000000000000000000000000000000000000000000000000000000001000000",
        "0000000000000000000000000000000000000000000000000000000010000000",
        "0000000000000000000000000000000000000000000000000000000100000000",
        "0000000000000000000000000000000000000000000000000000001000000000",
        "0000000000000000000000000000000000000000000000000000010000000000",
        "0000000000000000000000000000000000000000000000000000100000000000",
        "0000000000000000000000000000000000000000000000000001000000000000",
        "0000000000000000000000000000000000000000000000000010000000000000",
        "0000000000000000000000000000000000000000000000000100000000000000",
        "0000000000000000000000000000000000000000000000001000000000000000",
        "0000000000000000000000000000000000000000000000010000000000000000",
        "0000000000000000000000000000000000000000000000100000000000000000",
        "0000000000000000000000000000000000000000000001000000000000000000",
        "0000000000000000000000000000000000000000000010000000000000000000",
        "0000000000000000000000000000000000000000000100000000000000000000",
        "0000000000000000000000000000000000000000001000000000000000000000",
        "0000000000000000000000000000000000000000010000000000000000000000",
        "0000000000000000000000000000000000000000100000000000000000000000",
        "0000000000000000000000000000000000000001000000000000000000000000",
        "0000000000000000000000000000000000000010000000000000000000000000",
        "0000000000000000000000000000000000000100000000000000000000000000",
        "0000000000000000000000000000000000001000000000000000000000000000",
        "0000000000000000000000000000000000010000000000000000000000000000",
        "0000000000000000000000000000000000100000000000000000000000000000",
        "0000000000000000000000000000000001000000000000000000000000000000",
        "0000000000000000000000000000000010000000000000000000000000000000",
        "0000000000000000000000000000000100000000000000000000000000000000",
        "0000000000000000000000000000001000000000000000000000000000000000",
        "0000000000000000000000000000010000000000000000000000000000000000",
        "0000000000000000000000000000100000000000000000000000000000000000",
        "0000000000000000000000000001000000000000000000000000000000000000",
        "0000000000000000000000000010000000000000000000000000000000000000",
        "0000000000000000000000000100000000000000000000000000000000000000",
        "0000000000000000000000001000000000000000000000000000000000000000",
        "0000000000000000000000010000000000000000000000000000000000000000",
        "0000000000000000000000100000000000000000000000000000000000000000",
        "0000000000000000000001000000000000000000000000000000000000000000",
        "0000000000000000000010000000000000000000000000000000000000000000",
        "0000000000000000000100000000000000000000000000000000000000000000",
        "0000000000000000001000000000000000000000000000000000000000000000",
        "0000000000000000010000000000000000000000000000000000000000000000",
        "0000000000000000100000000000000000000000000000000000000000000000",
        "0000000000000001000000000000000000000000000000000000000000000000",
        "0000000000000010000000000000000000000000000000000000000000000000",
        "0000000000000100000000000000000000000000000000000000000000000000",
        "0000000000001000000000000000000000000000000000000000000000000000",
        "0000000000010000000000000000000000000000000000000000000000000000",
        "0000000000100000000000000000000000000000000000000000000000000000",
        "0000000001000000000000000000000000000000000000000000000000000000",
        "0000000010000000000000000000000000000000000000000000000000000000",
        "0000000100000000000000000000000000000000000000000000000000000000",
        "0000001000000000000000000000000000000000000000000000000000000000",
        "0000010000000000000000000000000000000000000000000000000000000000",
        "0000100000000000000000000000000000000000000000000000000000000000",
        "0001000000000000000000000000000000000000000000000000000000000000",
        "0010000000000000000000000000000000000000000000000000000000000000",
        "0100000000000000000000000000000000000000000000000000000000000000",
        "1000000000000000000000000000000000000000000000000000000000000000",
    ];
    let m = Masks::new();
    for (i, c) in cases.iter().enumerate() {
        let got = format!("{:064b}", m.bit[i]);
        assert_eq!(*c, got, "bit[{}]", i);
        assert_eq!(!m.bit[i], m.r_bit[i], "r_bit[{}]", i);
    }
    Ok(())
}
